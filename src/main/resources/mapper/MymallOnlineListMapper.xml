<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zt.thread.dao.MymallOnlineListMapper">
    <resultMap id="BaseResultMap" type="com.zt.thread.entity.MymallOnlineList">
    <id column="MYMALL_ID" jdbcType="VARCHAR" property="mymallId" />
    <result column="SKU_IMAGE" jdbcType="VARCHAR" property="skuImage" />
    <result column="MAINSKU" jdbcType="VARCHAR" property="mainsku" />
    <result column="SKU" jdbcType="VARCHAR" property="sku" />
    <result column="SHOOPE_NAME" jdbcType="OTHER" property="shoopeName" />
    <result column="PRODUCT_ID" jdbcType="VARCHAR" property="productId" />
    <result column="SKU_STATUS" jdbcType="DECIMAL" property="skuStatus" />
    <result column="SKU_SELL_STATUS" jdbcType="DECIMAL" property="skuSellStatus" />
    <result column="COST_PRICE" jdbcType="DECIMAL" property="costPrice" />
    <result column="WEIGHT" jdbcType="DECIMAL" property="weight" />
    <result column="SELLING_PRICE" jdbcType="DECIMAL" property="sellingPrice" />
    <result column="FREIGHT" jdbcType="DECIMAL" property="freight" />
    <result column="TOTAL_PRICES" jdbcType="DECIMAL" property="totalPrices" />
    <result column="ORIGINAL_PRICE" jdbcType="DECIMAL" property="originalPrice" />
    <result column="BACKGROUNDING_STATE" jdbcType="DECIMAL" property="backgroundingState" />
    <result column="BACKGROUNDING_INVENTORY" jdbcType="DECIMAL" property="backgroundingInventory" />
    <result column="YESTERDAY_SALES" jdbcType="DECIMAL" property="yesterdaySales" />
    <result column="BEFORE_YESTERDAY_SALES" jdbcType="DECIMAL" property="beforeYesterdaySales" />
    <result column="CHANGE" jdbcType="DECIMAL" property="change" />
    <result column="WEEK_SALES" jdbcType="DECIMAL" property="weekSales" />
    <result column="MONTHLY_SALES" jdbcType="DECIMAL" property="monthlySales" />
    <result column="QUARTERLY_SALES" jdbcType="DECIMAL" property="quarterlySales" />
    <result column="SOLD" jdbcType="DECIMAL" property="sold" />
    <result column="SKU_CATEGORY" jdbcType="OTHER" property="skuCategory" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    </resultMap>
    <sql id="Base_Column_List">
    MYMALL_ID, SKU_IMAGE, MAINSKU, SKU, SHOOPE_NAME, PRODUCT_ID, SKU_STATUS, SKU_SELL_STATUS,
    COST_PRICE, WEIGHT, SELLING_PRICE, FREIGHT, TOTAL_PRICES, ORIGINAL_PRICE, BACKGROUNDING_STATE,
    BACKGROUNDING_INVENTORY, YESTERDAY_SALES, BEFORE_YESTERDAY_SALES, CHANGE, WEEK_SALES,
    MONTHLY_SALES, QUARTERLY_SALES, SOLD, SKU_CATEGORY, CREATE_TIME
    </sql>
  <!-- 更新数据 -->
    <select id="selectAll" resultMap="BaseResultMap" >
        SELECT
            MYMALL_ID
            ,SKU
            ,COST_PRICE
            ,WEIGHT
            ,YESTERDAY_SALES
            ,BEFORE_YESTERDAY_SALES
            ,WEEK_SALES
            ,MONTHLY_SALES
            ,QUARTERLY_SALES
            ,SHOOPE_NAME
        FROM Q_MYMALL_ONLINE_LIST
        WHERE
            1 = 1
            AND MYMALL_ID = '1547553885191A-SH-AD-345-ND'
    </select>
<!--<if test="backgroundingState != null">
                AND BACKGROUNDING_STATE = #{backgroundingState}
            </if>-->
    <select id="selectSalesBySku" resultType="java.util.HashMap">

        SELECT
            #{sku} AS SKU
            ,NVL(YESTERDAY.YESTERDAY_SALES, 0) AS YESTERDAY_SALES
            ,NVL(BEFORE_YESTERDAY.BEFORE_YESTERDAY_SALES, 0) AS BEFORE_YESTERDAY_SALES
            ,NVL(HEBDOMAD.HEBDOMAD_SALES, 0) AS HEBDOMAD_SALES
            ,NVL(MONTH.MONTH_SALES, 0) AS MONTH_SALES
            ,NVL(QUARTER.QUARTER_SALES, 0) AS QUARTER_SALES
        FROM
            (
                SELECT
                    SKU,
                    NVL(COUNT(O.ORDERID), 0) AS QUARTER_SALES
                FROM
                    R_SAL_ORDER_DETAIL D
                        LEFT JOIN R_SAL_ORDER O
                            ON D.ORDERID= O.ORDERID
                WHERE
                    O.PLATFORM = #{platform}
                    AND O.ORDER_TIME BETWEEN TO_DATE(#{startTime},${timeFormat} ) -89
                    AND TO_DATE( #{endTime},${timeFormat} )
                GROUP BY SKU
            ) QUARTER
            LEFT JOIN (
                SELECT
                    SKU,
                    NVL(COUNT(O.ORDERID), 0) AS MONTH_SALES
                FROM
                    R_SAL_ORDER_DETAIL D
                        LEFT JOIN R_SAL_ORDER O
                            ON D.ORDERID= O.ORDERID
                WHERE
                    O.PLATFORM = #{platform}
                    AND O.ORDER_TIME BETWEEN TO_DATE( #{startTime}, ${timeFormat} ) -29
                    AND TO_DATE( #{endTime}, ${timeFormat} )
                GROUP BY SKU
            ) MONTH

                  ON QUARTER.SKU = MONTH.SKU
            LEFT JOIN (
                SELECT
                    SKU,
                    NVL(COUNT(O.ORDERID), 0) AS HEBDOMAD_SALES
                FROM
                    R_SAL_ORDER_DETAIL D
                        LEFT JOIN R_SAL_ORDER O
                            ON D.ORDERID= O.ORDERID
                WHERE
                    O.PLATFORM = #{platform}
                    AND O.ORDER_TIME BETWEEN TO_DATE( #{startTime}, ${timeFormat} ) -6
                    AND TO_DATE(#{endTime}, ${timeFormat} )
                GROUP BY SKU
            ) HEBDOMAD
                  ON QUARTER.SKU = HEBDOMAD.SKU
            LEFT JOIN (
                SELECT
                    SKU,
                    NVL(COUNT(O.ORDERID), 0) AS BEFORE_YESTERDAY_SALES
                FROM
                    R_SAL_ORDER_DETAIL D
                        LEFT JOIN R_SAL_ORDER O
                            ON D.ORDERID= O.ORDERID
                WHERE
                    O.PLATFORM = #{platform}
                    AND O.ORDER_TIME BETWEEN TO_DATE(#{startTime}, ${timeFormat} ) - 2
                    AND TO_DATE(#{endTime}, ${timeFormat} ) - 2
                GROUP BY SKU
            ) BEFORE_YESTERDAY
                ON BEFORE_YESTERDAY.SKU = QUARTER.SKU
            LEFT JOIN (
                SELECT
                    SKU,
                    NVL(COUNT(O.ORDERID), 0) AS YESTERDAY_SALES
                FROM
                    R_SAL_ORDER_DETAIL D
                        LEFT JOIN R_SAL_ORDER O
                            ON D.ORDERID= O.ORDERID
                WHERE
                    O.PLATFORM = #{platform}
                    AND O.ORDER_TIME BETWEEN TO_DATE(#{startTime}, ${timeFormat} ) -1
                    AND TO_DATE(#{endTime}, ${timeFormat} ) - 1
                GROUP BY SKU
            ) YESTERDAY
                ON YESTERDAY.SKU = QUARTER.SKU
        WHERE QUARTER.SKU = #{sku}
    </select>

    <update id="updateSycnProAndOrderDetail" parameterType="com.zt.thread.entity.MymallOnlineList" >
        UPDATE Q_MYMALL_ONLINE_LIST
        SET
            COST_PRICE = #{costPrice}
            , WEIGHT = #{weight}
            <if test="quarterlySales >= 0">
                ,CHANGE = #{change, jdbcType= INTEGER}
                ,SKU_STATUS = #{skuStatus, jdbcType= INTEGER}
                , WEEK_SALES = #{weekSales, jdbcType= INTEGER}
                , MONTHLY_SALES = #{monthlySales, jdbcType= INTEGER}
                , QUARTERLY_SALES = #{quarterlySales, jdbcType= INTEGER}
                , YESTERDAY_SALES = #{yesterdaySales, jdbcType= INTEGER}
                , BEFORE_YESTERDAY_SALES = #{beforeYesterdaySales, jdbcType= INTEGER}
            </if>
        WHERE  MYMALL_ID = #{mymallId}
    </update>


    <select id = "findShopToken" resultType="java.lang.String">
		 SELECT TOKEN
		 FROM C_MAP_SYS_SHOPTOKEN
		 WHERE SHOPNAME = #{shopname}
	</select>

    <update id="updateEnableProduct" >
        UPDATE Q_MYMALL_ONLINE_LIST
        SET
            BACKGROUNDING_STATE = #{state}
        WHERE  MYMALL_ID = #{mymallId}
    </update>

</mapper>